// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using StoreData;
using System;

namespace StoreData.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20181102233834_4")]
    partial class _4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StoreData.Models.BillingInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("CountryOrState")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("BillingInfo");
                });

            modelBuilder.Entity("StoreData.Models.ExternalUserLogins", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider")
                        .IsRequired();

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExternalUserLogins");
                });

            modelBuilder.Entity("StoreData.Models.ImageUrls", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ItemId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ImageUrls");
                });

            modelBuilder.Entity("StoreData.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("InvoiceDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("StoreData.Models.ItemDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DeptName");

                    b.HasKey("Id");

                    b.ToTable("ItemDepartment");
                });

            modelBuilder.Entity("StoreData.Models.Items", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Availability");

                    b.Property<string>("Color");

                    b.Property<int>("Discount");

                    b.Property<int?>("ItemTypeSubId");

                    b.Property<int?>("ManuModelId");

                    b.Property<int?>("ModelId");

                    b.Property<double>("Price");

                    b.HasKey("Id");

                    b.HasIndex("ItemTypeSubId")
                        .IsUnique()
                        .HasFilter("[ItemTypeSubId] IS NOT NULL");

                    b.HasIndex("ManuModelId")
                        .IsUnique()
                        .HasFilter("[ManuModelId] IS NOT NULL");

                    b.HasIndex("ModelId")
                        .IsUnique()
                        .HasFilter("[ModelId] IS NOT NULL");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("StoreData.Models.ItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ItemType");
                });

            modelBuilder.Entity("StoreData.Models.ItemTypeSub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ItemTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ItemTypeId");

                    b.ToTable("ItemTypeSub");
                });

            modelBuilder.Entity("StoreData.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("StoreData.Models.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ItemDepartmentId");

                    b.Property<string>("Name");

                    b.Property<int?>("SpecsIdId");

                    b.Property<int?>("TypeIdId");

                    b.HasKey("Id");

                    b.HasIndex("ItemDepartmentId")
                        .IsUnique()
                        .HasFilter("[ItemDepartmentId] IS NOT NULL");

                    b.HasIndex("SpecsIdId")
                        .IsUnique()
                        .HasFilter("[SpecsIdId] IS NOT NULL");

                    b.HasIndex("TypeIdId")
                        .IsUnique()
                        .HasFilter("[TypeIdId] IS NOT NULL");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("StoreData.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BillingInfoId");

                    b.Property<DateTimeOffset?>("DateAdded");

                    b.Property<int>("InvoiceId");

                    b.Property<int>("ItemId");

                    b.Property<int>("NumberOfItems");

                    b.Property<int>("PaymentMethodId");

                    b.Property<int>("StatusId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BillingInfoId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ItemId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("StoreData.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Method");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("StoreData.Models.Reviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DayOfReview");

                    b.Property<int?>("ItemId");

                    b.Property<double>("Rating");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<int?>("UsersId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UsersId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("StoreData.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NormalizedName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("StoreData.Models.Specs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Specification");

                    b.HasKey("Id");

                    b.ToTable("Specs");
                });

            modelBuilder.Entity("StoreData.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StatusText");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("StoreData.Models.UserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("StoreData.Models.UserItemHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ItemId");

                    b.Property<DateTimeOffset?>("TimeOfAccess")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("UserItemHistory");
                });

            modelBuilder.Entity("StoreData.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("StoreData.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adress");

                    b.Property<string>("City");

                    b.Property<string>("CountryOrState");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(32);

                    b.Property<string>("LastName")
                        .HasMaxLength(32);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<int>("LoginTry");

                    b.Property<string>("MiddleInitial")
                        .HasMaxLength(1);

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StoreData.Models.ExternalUserLogins", b =>
                {
                    b.HasOne("StoreData.Models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StoreData.Models.ImageUrls", b =>
                {
                    b.HasOne("StoreData.Models.Items", "Item")
                        .WithMany("ImageUrls")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("StoreData.Models.Invoice", b =>
                {
                    b.HasOne("StoreData.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StoreData.Models.Items", b =>
                {
                    b.HasOne("StoreData.Models.ItemTypeSub", "ItemTypeSub")
                        .WithOne("Items")
                        .HasForeignKey("StoreData.Models.Items", "ItemTypeSubId");

                    b.HasOne("StoreData.Models.Manufacturer", "ManuModel")
                        .WithOne("Items")
                        .HasForeignKey("StoreData.Models.Items", "ManuModelId");

                    b.HasOne("StoreData.Models.Model", "Model")
                        .WithOne("Items")
                        .HasForeignKey("StoreData.Models.Items", "ModelId");
                });

            modelBuilder.Entity("StoreData.Models.ItemTypeSub", b =>
                {
                    b.HasOne("StoreData.Models.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId");
                });

            modelBuilder.Entity("StoreData.Models.Model", b =>
                {
                    b.HasOne("StoreData.Models.ItemDepartment", "ItemDepartment")
                        .WithOne("Model")
                        .HasForeignKey("StoreData.Models.Model", "ItemDepartmentId");

                    b.HasOne("StoreData.Models.Specs", "SpecsId")
                        .WithOne("Model")
                        .HasForeignKey("StoreData.Models.Model", "SpecsIdId");

                    b.HasOne("StoreData.Models.ItemType", "TypeId")
                        .WithOne("Model")
                        .HasForeignKey("StoreData.Models.Model", "TypeIdId");
                });

            modelBuilder.Entity("StoreData.Models.Order", b =>
                {
                    b.HasOne("StoreData.Models.BillingInfo", "BillingInfo")
                        .WithMany()
                        .HasForeignKey("BillingInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StoreData.Models.Invoice")
                        .WithMany("Orders")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StoreData.Models.Items", "Items")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StoreData.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StoreData.Models.Status", "Statuses")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StoreData.Models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StoreData.Models.Reviews", b =>
                {
                    b.HasOne("StoreData.Models.Items", "Item")
                        .WithMany("Reviews")
                        .HasForeignKey("ItemId");

                    b.HasOne("StoreData.Models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("StoreData.Models.UserClaims", b =>
                {
                    b.HasOne("StoreData.Models.Users", "Users")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StoreData.Models.UserItemHistory", b =>
                {
                    b.HasOne("StoreData.Models.Items", "Items")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StoreData.Models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StoreData.Models.UserRole", b =>
                {
                    b.HasOne("StoreData.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StoreData.Models.Users", "Users")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
